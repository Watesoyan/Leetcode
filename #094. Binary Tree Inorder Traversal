class Solution:
    # with recurrence
    def inorderTraversal1(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        result = []
        
        if root is None:
            return result
        
        result += self.inorderTraversal(root.left)
        result.append(root.val)
        result += self.inorderTraversal(root.right)
        
        return result
    
    # without recurrence
    def inorderTraversal2(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        result = []
        stackm = []
        stackr = []
        p = root
        flag = 0
        
        while True:
            while flag is 0:
                
                if p is None:
                    flag = 2
                    break
                
                L = p.left is None
                R = p.right is None
                if L and R:
                    result.append(p.val)
                    flag = 1
                    break
                
                stackm.append(p.val)
                stackr.append(p.right)
                
                if not L:
                    p = p.left
                else:
                    flag = 1
            
            while flag is 1:
                if len(stackm) is 0:
                    flag = 2
                    break
                result.append(stackm.pop())
                flag = 2
                
            while flag is 2:
                if len(stackr) is 0:
                    return result
                r = stackr.pop()

                if r is not None:
                    p = r
                    flag = 0
                else:
                    flag = 1
