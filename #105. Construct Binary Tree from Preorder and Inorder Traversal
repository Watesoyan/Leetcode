class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        """
        preorder: [root left right]
        inorder:  [left root right]
        """ 
        
        if len(preorder) == 0:
            return None
        
        pre_idx_stack = [(0,len(preorder))]
        offset_stack = [0]
        
        nodes = list(map(TreeNode, preorder))
        
        while len(pre_idx_stack) > 0:
            
            pre_min, pre_max = pre_idx_stack.pop()
            n = pre_max - pre_min
            offset = offset_stack.pop()
            in_min, in_max = pre_min + offset, pre_max + offset
            
            tmp_root = nodes[pre_min]
            
            tmp_left = None
            tmp_right = None
            
            if n != 1: 
                
                _preorder = preorder[pre_min : pre_max]
                _inorder = inorder[in_min : in_max]
                
                for i in range(len(_preorder)):
                    if _inorder[i] == _preorder[0]:
                        root_idx = i
                        
                if root_idx != 0 :
                    tmp_left = nodes[pre_min + 1]
                    if root_idx != 1:   
                        pre_idx_stack.append((pre_min + 1, pre_min + root_idx + 1))
                        offset_stack.append(in_min - pre_min - 1)
                    
                if root_idx != n - 1:
                    tmp_right = nodes[pre_min + root_idx + 1]
                    if root_idx != n - 2:
                        pre_idx_stack.append((pre_min + root_idx + 1, pre_max))
                        offset_stack.append(in_min - pre_min)
                
            tmp_root.left = tmp_left
            tmp_root.right = tmp_right
            
        return nodes[0]
